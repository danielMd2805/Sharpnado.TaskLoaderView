//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sample.Localization {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class SampleResources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal SampleResources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Sample.Localization.SampleResources", typeof(SampleResources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TEST IT.
        /// </summary>
        internal static string Button_TestIt {
            get {
                return ResourceManager.GetString("Button_TestIt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You can bind a `TaskLoaderCommand` to any views to display UI feedback matching your command task state..
        /// </summary>
        internal static string Commands_Description_1 {
            get {
                return ResourceManager.GetString("Commands_Description_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It works super well with `CompositeTaskLoaderNotifier` and `Snackbar` :).
        /// </summary>
        internal static string Commands_Description_2 {
            get {
                return ResourceManager.GetString("Commands_Description_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Commands/Snackbar.
        /// </summary>
        internal static string Commands_Title {
            get {
                return ResourceManager.GetString("Commands_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You can define your own views for each task state..
        /// </summary>
        internal static string CustomLayout_Description_1 {
            get {
                return ResourceManager.GetString("CustomLayout_Description_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The `TaskLoaderView` uses an AbsoluteLayout, so you can even position your custom views very precisely..
        /// </summary>
        internal static string CustomLayout_Description_2 {
            get {
                return ResourceManager.GetString("CustomLayout_Description_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to User Custom Views.
        /// </summary>
        internal static string CustomLayout_Title {
            get {
                return ResourceManager.GetString("CustomLayout_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to `TaskLoaderView` provides defaults layout for all the views matching your task states (Loading/Error/Success/Notification)..
        /// </summary>
        internal static string DefaultLayout_Description_1 {
            get {
                return ResourceManager.GetString("DefaultLayout_Description_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Those layouts are stylable, you can provide converters for error image and message.
        ///Set the loader color, the retry button text, the font family used.....
        /// </summary>
        internal static string DefaultLayout_Description_2 {
            get {
                return ResourceManager.GetString("DefaultLayout_Description_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default  Views.
        /// </summary>
        internal static string DefaultLayout_Title {
            get {
                return ResourceManager.GetString("DefaultLayout_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nothing here folks..
        /// </summary>
        internal static string Empty_Screen {
            get {
                return ResourceManager.GetString("Empty_Screen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &quot;It&apos;s not me, it&apos;s the backend.&quot;.
        /// </summary>
        internal static string Error_Business {
            get {
                return ResourceManager.GetString("Error_Business", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Couldn&apos;t reach the Internet..
        /// </summary>
        internal static string Error_Network {
            get {
                return ResourceManager.GetString("Error_Network", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &quot;An ill wind is blowing...&quot;.
        /// </summary>
        internal static string Error_Unknown {
            get {
                return ResourceManager.GetString("Error_Unknown", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to RETRY.
        /// </summary>
        internal static string ErrorButton_Retry {
            get {
                return ResourceManager.GetString("ErrorButton_Retry", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error Emulation.
        /// </summary>
        internal static string ErrorEmulator_Title {
            get {
                return ResourceManager.GetString("ErrorEmulator_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error On Refresh.
        /// </summary>
        internal static string ErrorType_ErrorOnRefresh {
            get {
                return ResourceManager.GetString("ErrorType_ErrorOnRefresh", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Network Error thrown.
        /// </summary>
        internal static string ErrorType_Network {
            get {
                return ResourceManager.GetString("ErrorType_Network", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No Data returned.
        /// </summary>
        internal static string ErrorType_NoData {
            get {
                return ResourceManager.GetString("ErrorType_NoData", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No Error.
        /// </summary>
        internal static string ErrorType_None {
            get {
                return ResourceManager.GetString("ErrorType_None", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Server Exception thrown.
        /// </summary>
        internal static string ErrorType_Server {
            get {
                return ResourceManager.GetString("ErrorType_Server", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unknown Error thrown.
        /// </summary>
        internal static string ErrorType_Unknown {
            get {
                return ResourceManager.GetString("ErrorType_Unknown", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use Lottie files to unlock next level UI.
        ///    .
        /// </summary>
        internal static string Lottie_Description {
            get {
                return ResourceManager.GetString("Lottie_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Lottie Animations.
        /// </summary>
        internal static string Lottie_Title {
            get {
                return ResourceManager.GetString("Lottie_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Create a custom user NotStartedView to display a view before the Task is ran.
        ///You can for example use it to start your task on demand.
        ///    .
        /// </summary>
        internal static string NotStartedView_Description {
            get {
                return ResourceManager.GetString("NotStartedView_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not Started View.
        /// </summary>
        internal static string NotStartedView_Title {
            get {
                return ResourceManager.GetString("NotStartedView_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Supports the excellent Xamarin.Forms.Skeleton loading package by Horus..
        /// </summary>
        internal static string SkeletonLoading_Description_1 {
            get {
                return ResourceManager.GetString("SkeletonLoading_Description_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Find an easier implementation of the pattern with static dummy entities..
        /// </summary>
        internal static string SkeletonLoading_Description_2 {
            get {
                return ResourceManager.GetString("SkeletonLoading_Description_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Skeleton loading.
        /// </summary>
        internal static string SkeletonLoading_Title {
            get {
                return ResourceManager.GetString("SkeletonLoading_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sharpnado&apos;s TaskLoaderView.
        /// </summary>
        internal static string Title_TaskLoaderView {
            get {
                return ResourceManager.GetString("Title_TaskLoaderView", resourceCulture);
            }
        }
    }
}
